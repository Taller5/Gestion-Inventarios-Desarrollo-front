/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WarehousesRouteImport } from './routes/warehouses'
import { Route as SalesPageRouteImport } from './routes/salesPage'
import { Route as RecoverPasswordRouteImport } from './routes/recoverPassword'
import { Route as ProviderRouteImport } from './routes/provider'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InventaryRouteImport } from './routes/inventary'
import { Route as IapredictionRouteImport } from './routes/iaprediction'
import { Route as HomepageRouteImport } from './routes/homepage'
import { Route as FinanceRouteImport } from './routes/finance'
import { Route as EmployeesRouteImport } from './routes/employees'
import { Route as CustomerRouteImport } from './routes/customer'
import { Route as CashRegisterPageRouteImport } from './routes/cashRegisterPage'
import { Route as BusinessesRouteImport } from './routes/businesses'
import { Route as BranchesRouteImport } from './routes/branches'
import { Route as IndexRouteImport } from './routes/index'

const WarehousesRoute = WarehousesRouteImport.update({
  id: '/warehouses',
  path: '/warehouses',
  getParentRoute: () => rootRouteImport,
} as any)
const SalesPageRoute = SalesPageRouteImport.update({
  id: '/salesPage',
  path: '/salesPage',
  getParentRoute: () => rootRouteImport,
} as any)
const RecoverPasswordRoute = RecoverPasswordRouteImport.update({
  id: '/recoverPassword',
  path: '/recoverPassword',
  getParentRoute: () => rootRouteImport,
} as any)
const ProviderRoute = ProviderRouteImport.update({
  id: '/provider',
  path: '/provider',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InventaryRoute = InventaryRouteImport.update({
  id: '/inventary',
  path: '/inventary',
  getParentRoute: () => rootRouteImport,
} as any)
const IapredictionRoute = IapredictionRouteImport.update({
  id: '/iaprediction',
  path: '/iaprediction',
  getParentRoute: () => rootRouteImport,
} as any)
const HomepageRoute = HomepageRouteImport.update({
  id: '/homepage',
  path: '/homepage',
  getParentRoute: () => rootRouteImport,
} as any)
const FinanceRoute = FinanceRouteImport.update({
  id: '/finance',
  path: '/finance',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesRoute = EmployeesRouteImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerRoute = CustomerRouteImport.update({
  id: '/customer',
  path: '/customer',
  getParentRoute: () => rootRouteImport,
} as any)
const CashRegisterPageRoute = CashRegisterPageRouteImport.update({
  id: '/cashRegisterPage',
  path: '/cashRegisterPage',
  getParentRoute: () => rootRouteImport,
} as any)
const BusinessesRoute = BusinessesRouteImport.update({
  id: '/businesses',
  path: '/businesses',
  getParentRoute: () => rootRouteImport,
} as any)
const BranchesRoute = BranchesRouteImport.update({
  id: '/branches',
  path: '/branches',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/branches': typeof BranchesRoute
  '/businesses': typeof BusinessesRoute
  '/cashRegisterPage': typeof CashRegisterPageRoute
  '/customer': typeof CustomerRoute
  '/employees': typeof EmployeesRoute
  '/finance': typeof FinanceRoute
  '/homepage': typeof HomepageRoute
  '/iaprediction': typeof IapredictionRoute
  '/inventary': typeof InventaryRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/provider': typeof ProviderRoute
  '/recoverPassword': typeof RecoverPasswordRoute
  '/salesPage': typeof SalesPageRoute
  '/warehouses': typeof WarehousesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/branches': typeof BranchesRoute
  '/businesses': typeof BusinessesRoute
  '/cashRegisterPage': typeof CashRegisterPageRoute
  '/customer': typeof CustomerRoute
  '/employees': typeof EmployeesRoute
  '/finance': typeof FinanceRoute
  '/homepage': typeof HomepageRoute
  '/iaprediction': typeof IapredictionRoute
  '/inventary': typeof InventaryRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/provider': typeof ProviderRoute
  '/recoverPassword': typeof RecoverPasswordRoute
  '/salesPage': typeof SalesPageRoute
  '/warehouses': typeof WarehousesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/branches': typeof BranchesRoute
  '/businesses': typeof BusinessesRoute
  '/cashRegisterPage': typeof CashRegisterPageRoute
  '/customer': typeof CustomerRoute
  '/employees': typeof EmployeesRoute
  '/finance': typeof FinanceRoute
  '/homepage': typeof HomepageRoute
  '/iaprediction': typeof IapredictionRoute
  '/inventary': typeof InventaryRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/provider': typeof ProviderRoute
  '/recoverPassword': typeof RecoverPasswordRoute
  '/salesPage': typeof SalesPageRoute
  '/warehouses': typeof WarehousesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/branches'
    | '/businesses'
    | '/cashRegisterPage'
    | '/customer'
    | '/employees'
    | '/finance'
    | '/homepage'
    | '/iaprediction'
    | '/inventary'
    | '/login'
    | '/profile'
    | '/provider'
    | '/recoverPassword'
    | '/salesPage'
    | '/warehouses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/branches'
    | '/businesses'
    | '/cashRegisterPage'
    | '/customer'
    | '/employees'
    | '/finance'
    | '/homepage'
    | '/iaprediction'
    | '/inventary'
    | '/login'
    | '/profile'
    | '/provider'
    | '/recoverPassword'
    | '/salesPage'
    | '/warehouses'
  id:
    | '__root__'
    | '/'
    | '/branches'
    | '/businesses'
    | '/cashRegisterPage'
    | '/customer'
    | '/employees'
    | '/finance'
    | '/homepage'
    | '/iaprediction'
    | '/inventary'
    | '/login'
    | '/profile'
    | '/provider'
    | '/recoverPassword'
    | '/salesPage'
    | '/warehouses'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BranchesRoute: typeof BranchesRoute
  BusinessesRoute: typeof BusinessesRoute
  CashRegisterPageRoute: typeof CashRegisterPageRoute
  CustomerRoute: typeof CustomerRoute
  EmployeesRoute: typeof EmployeesRoute
  FinanceRoute: typeof FinanceRoute
  HomepageRoute: typeof HomepageRoute
  IapredictionRoute: typeof IapredictionRoute
  InventaryRoute: typeof InventaryRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  ProviderRoute: typeof ProviderRoute
  RecoverPasswordRoute: typeof RecoverPasswordRoute
  SalesPageRoute: typeof SalesPageRoute
  WarehousesRoute: typeof WarehousesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/warehouses': {
      id: '/warehouses'
      path: '/warehouses'
      fullPath: '/warehouses'
      preLoaderRoute: typeof WarehousesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/salesPage': {
      id: '/salesPage'
      path: '/salesPage'
      fullPath: '/salesPage'
      preLoaderRoute: typeof SalesPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recoverPassword': {
      id: '/recoverPassword'
      path: '/recoverPassword'
      fullPath: '/recoverPassword'
      preLoaderRoute: typeof RecoverPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/provider': {
      id: '/provider'
      path: '/provider'
      fullPath: '/provider'
      preLoaderRoute: typeof ProviderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inventary': {
      id: '/inventary'
      path: '/inventary'
      fullPath: '/inventary'
      preLoaderRoute: typeof InventaryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/iaprediction': {
      id: '/iaprediction'
      path: '/iaprediction'
      fullPath: '/iaprediction'
      preLoaderRoute: typeof IapredictionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/homepage': {
      id: '/homepage'
      path: '/homepage'
      fullPath: '/homepage'
      preLoaderRoute: typeof HomepageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/finance': {
      id: '/finance'
      path: '/finance'
      fullPath: '/finance'
      preLoaderRoute: typeof FinanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customer': {
      id: '/customer'
      path: '/customer'
      fullPath: '/customer'
      preLoaderRoute: typeof CustomerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cashRegisterPage': {
      id: '/cashRegisterPage'
      path: '/cashRegisterPage'
      fullPath: '/cashRegisterPage'
      preLoaderRoute: typeof CashRegisterPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/businesses': {
      id: '/businesses'
      path: '/businesses'
      fullPath: '/businesses'
      preLoaderRoute: typeof BusinessesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/branches': {
      id: '/branches'
      path: '/branches'
      fullPath: '/branches'
      preLoaderRoute: typeof BranchesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BranchesRoute: BranchesRoute,
  BusinessesRoute: BusinessesRoute,
  CashRegisterPageRoute: CashRegisterPageRoute,
  CustomerRoute: CustomerRoute,
  EmployeesRoute: EmployeesRoute,
  FinanceRoute: FinanceRoute,
  HomepageRoute: HomepageRoute,
  IapredictionRoute: IapredictionRoute,
  InventaryRoute: InventaryRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  ProviderRoute: ProviderRoute,
  RecoverPasswordRoute: RecoverPasswordRoute,
  SalesPageRoute: SalesPageRoute,
  WarehousesRoute: WarehousesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
